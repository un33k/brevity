# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-01-17 16:52
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import profileware.utils
import re
import siteware.backends.storages.default


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, help_text='Your private email address. We use this to contact you.', max_length=254, unique=True, verbose_name='email')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates if the user can log into this admin site.', verbose_name='staff member')),
                ('is_active', models.BooleanField(default=True, help_text='Inactive users cannot login.', verbose_name='active')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date Joined')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
                ('is_public', models.BooleanField(default=False, help_text='Only public profiles are viewable by others.', verbose_name='public')),
                ('username', models.CharField(default=profileware.utils.get_default_username, help_text='Choose alphanumeric and dashes. It cannot begin or end with a dash.', max_length=32, unique=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator(re.compile('^[a-z0-9]([a-z0-9]|-[^-])+[a-z0-9]$', 34), 'This field can only contain alphanumeric characters with single dashes in between.'), django.core.validators.MaxLengthValidator(32)], verbose_name='username')),
                ('short_name', models.CharField(help_text='Your short name. It can be your first name, username, or what your friends call you.', max_length=60, verbose_name='short name')),
                ('full_name', models.CharField(help_text='Your full name.', max_length=255, verbose_name='full name')),
                ('bio', models.TextField(blank=True, help_text='Your biographical information or background.', validators=[django.core.validators.MaxLengthValidator(2000)], verbose_name='your bio')),
                ('public_email', models.EmailField(blank=True, help_text='Your public email address. Everyone can see this.', max_length=254, verbose_name='public email')),
                ('website', models.CharField(blank=True, help_text='Your website address.', max_length=120, verbose_name='website')),
                ('location', models.CharField(blank=True, help_text='Your location or address.', max_length=255, verbose_name='location')),
                ('company', models.CharField(blank=True, help_text='Your company name.', max_length=120, verbose_name='company')),
                ('photo', models.ImageField(blank=True, max_length=255, null=True, storage=siteware.backends.storages.default.MediaFilesStorage(), upload_to=profileware.utils.uploadto_user_photo)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'profile',
                'verbose_name_plural': 'profiles',
            },
        ),
    ]
