# -*- coding: utf-8 -*-
# Generated by Django 1.9.1 on 2016-01-17 16:52
from __future__ import unicode_literals

import articleware.models.articles
import articleware.utils.images
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import siteware.backends.storages.default
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.CharField(default=articleware.models.articles.article_uuid, editable=False, max_length=12)),
                ('status', models.CharField(choices=[('Editing', 'Editing'), ('Published', 'Published')], default='Editing', help_text='Article status', max_length=20, verbose_name='Status')),
                ('headline', models.TextField(help_text='Headline for this post', validators=[django.core.validators.MinLengthValidator(15), django.core.validators.MaxLengthValidator(120)], verbose_name='Headline')),
                ('slug', models.CharField(editable=False, help_text='Cleaned up version of the title to be used in the URL', max_length=120, verbose_name='Slug')),
                ('featured', models.BooleanField(default=False, help_text='If this video is selected as a featured article', verbose_name='Featured')),
                ('author', models.ForeignKey(blank=True, help_text='Author of this post', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='author', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CategoryTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name_plural': 'Category Tags',
                'verbose_name': 'Category Tag',
            },
        ),
        migrations.CreateModel(
            name='CategoryTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articleware_categorytaggeditem_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articleware_categorytaggeditem_items', to='articleware.CategoryTag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContentTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name_plural': 'Content Tags',
                'verbose_name': 'Content Tag',
            },
        ),
        migrations.CreateModel(
            name='ContentTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articleware_contenttaggeditem_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articleware_contenttaggeditem_items', to='articleware.ContentTag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(max_length=255, null=True, storage=siteware.backends.storages.default.MediaFilesStorage(), upload_to=articleware.utils.images.uploadto_image_to_year_month_lg)),
                ('image_md', models.ImageField(max_length=255, null=True, storage=siteware.backends.storages.default.MediaFilesStorage(), upload_to=articleware.utils.images.uploadto_image_to_year_month_md)),
                ('image_sm', models.ImageField(max_length=255, null=True, storage=siteware.backends.storages.default.MediaFilesStorage(), upload_to=articleware.utils.images.uploadto_image_to_year_month_sm)),
                ('priority', models.PositiveSmallIntegerField(editable=False, null=True)),
            ],
            options={
                'verbose_name_plural': 'images',
                'verbose_name': 'image',
            },
        ),
        migrations.CreateModel(
            name='Snippet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('TEXT', 'TEXT'), ('IMAGE', 'IMAGE'), ('VIDEO', 'VIDEO')], default='IMAGE', max_length=10)),
                ('priority', models.PositiveSmallIntegerField(editable=False, null=True)),
                ('caption', models.TextField(blank=True, help_text='Brief explanation & photo/video credit appended to this snippet.', null=True, validators=[django.core.validators.MaxLengthValidator(110)], verbose_name='caption')),
                ('content', models.TextField(blank=True, help_text='Content for this snippet.', null=True, validators=[django.core.validators.MaxLengthValidator(3000)], verbose_name='content')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snippet', to='articleware.Article')),
            ],
            options={
                'verbose_name_plural': 'snippets',
                'verbose_name': 'snippet',
            },
        ),
        migrations.CreateModel(
            name='TargetingTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name_plural': 'Targeting Tags',
                'verbose_name': 'Targeting Tag',
            },
        ),
        migrations.CreateModel(
            name='TargetingTaggedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articleware_targetingtaggeditem_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articleware_targetingtaggeditem_items', to='articleware.TargetingTag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hit', models.PositiveIntegerField(default=0, editable=False)),
                ('view', models.PositiveIntegerField(default=0, editable=False)),
                ('article', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='track', to='articleware.Article')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.URLField(max_length=256, verbose_name='Image URL')),
                ('link', models.URLField(max_length=256, verbose_name='Video URL')),
                ('provider', models.CharField(max_length=100)),
                ('vid', models.CharField(max_length=100)),
                ('priority', models.PositiveSmallIntegerField(editable=False, null=True)),
                ('snippet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video', to='articleware.Snippet')),
            ],
            options={
                'verbose_name_plural': 'videos',
                'verbose_name': 'video',
            },
        ),
        migrations.AddField(
            model_name='image',
            name='snippet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image', to='articleware.Snippet'),
        ),
        migrations.AddField(
            model_name='article',
            name='categories',
            field=taggit.managers.TaggableManager(help_text='Comma-separated article categories. Ex: Technology, Finance', through='articleware.CategoryTaggedItem', to='articleware.CategoryTag', verbose_name='Category Tags'),
        ),
        migrations.AddField(
            model_name='article',
            name='editor',
            field=models.ForeignKey(blank=True, help_text='Last editor of this post', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='editor', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='Comma-separated content tags. Ex: Android, iPhone, iPad Pro', through='articleware.ContentTaggedItem', to='articleware.ContentTag', verbose_name='Content Tags'),
        ),
        migrations.AddField(
            model_name='article',
            name='targets',
            field=taggit.managers.TaggableManager(help_text='Comma-separated regions. Ex: Canada, Mexico, United States', through='articleware.TargetingTaggedItem', to='articleware.TargetingTag', verbose_name='Targeting Tags'),
        ),
        migrations.AlterUniqueTogether(
            name='video',
            unique_together=set([('snippet', 'vid', 'priority'), ('snippet', 'vid')]),
        ),
        migrations.AlterUniqueTogether(
            name='snippet',
            unique_together=set([('article', 'priority')]),
        ),
        migrations.AlterUniqueTogether(
            name='image',
            unique_together=set([('snippet', 'priority')]),
        ),
        migrations.AlterUniqueTogether(
            name='article',
            unique_together=set([('author', 'headline')]),
        ),
    ]
